<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务拆分 on xcbeyond</title>
    <link>https://xcbeyond.cn/tags/%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86/</link>
    <description>Recent content in 服务拆分 on xcbeyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2021 xcbeyond all rights reserved.</copyright>
    <lastBuildDate>Fri, 15 Jan 2021 10:02:25 +0800</lastBuildDate><atom:link href="https://xcbeyond.cn/tags/%E6%9C%8D%E5%8A%A1%E6%8B%86%E5%88%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我们设计的是微服务还是小单体呢？</title>
      <link>https://xcbeyond.cn/blog/microservice/%E6%88%91%E4%BB%AC%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%98%E6%98%AF%E5%B0%8F%E5%8D%95%E4%BD%93%E5%91%A2/</link>
      <pubDate>Fri, 15 Jan 2021 10:02:25 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/microservice/%E6%88%91%E4%BB%AC%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%98%E6%98%AF%E5%B0%8F%E5%8D%95%E4%BD%93%E5%91%A2/</guid>
      <description>在微服务设计和实践中，可能很多人会一致认为：“将单体应用拆分成多少个微服务，是微服务的设计重点。”
很多人把大量的精力花费在如何拆分微服务上，并把微服务设计好坏全部归因于微服务拆分的好坏。
可事实真是这样吗？其实并非如此！
Martin Fowler在提出微服务时，提到过微服务的一个重要特征：演进式架构。
演进式架构以支持增量、非破坏的变更作为第一原则，同时支持在应用程序结构层面的多维度变化。
那如何判断微服务设计是否合理呢？
其实很简单，你只需看它是否满足这样的情形：**随着业务的发展或需求变更，在领域模型和微服务不断被重新拆分，或者组合成新的微服务过程中，不会大幅度增加软件开发或维护的成本，并且这个架构演进的过程是非常轻松和简单的。**这才是微服务设计的重点，更是微服务设计时最应该关系的问题。
在微服务设计时，很多团队在将集中式单体应用拆分微服务时，单纯按照业务功能将原来的单体应用，从一个部署包拆分成多个所谓的“微服务”部署包。这些“微服务”内的代码却仍然采用传统三层架构的设计模式，即这些代码依旧高度耦合，逻辑边界不清晰，我们暂且称它为“小单体微服务”。
 三层架构：表现层、业务层、数据访问层。</description>
    </item>
    
  </channel>
</rss>

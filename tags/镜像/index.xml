<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>镜像 on xcbeyond</title>
    <link>https://xcbeyond.cn/tags/%E9%95%9C%E5%83%8F/</link>
    <description>Recent content in 镜像 on xcbeyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2021-2025 xcbeyond 版权所有.</copyright>
    <lastBuildDate>Wed, 30 Apr 2025 09:51:43 +0800</lastBuildDate><atom:link href="https://xcbeyond.cn/tags/%E9%95%9C%E5%83%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes 镜像拉取认证完全指南：8 种实战方法解决私有仓库访问难题</title>
      <link>https://xcbeyond.cn/blog/kubernetes/the-guide-to-kubernetes-image-pull-authentication/</link>
      <pubDate>Wed, 30 Apr 2025 09:51:43 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/kubernetes/the-guide-to-kubernetes-image-pull-authentication/</guid>
      <description>在 Kubernetes 集群中，容器镜像的拉取是 Pod 启动的关键步骤。当镜像存储在私有仓库（如 Docker Hub 私有库、Harbor、AWS ECR 等）时，Kubernetes 需要提供认证凭据才能访问。若认证配置错误，会导致 ErrImagePull 或 ImagePullBackOff 等错误。镜像拉取认证的核心目标是：</description>
    </item>
    
    <item>
      <title>Dockerfile 的最佳实践 ｜ Dockerfile 你写的都对么？</title>
      <link>https://xcbeyond.cn/blog/containers/dockerfile-best-practices/</link>
      <pubDate>Sat, 14 May 2022 21:40:14 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/containers/dockerfile-best-practices/</guid>
      <description>随着应用的容器化、上云后，将伴随着 Docker 镜像的构建，构建 Docker 镜像成为了最基本的一步，其中 Dockerfile 便是用来构建镜像的一种文本文件，镜像的优劣全靠 Dockerfile 编写的是否合理、合规。本文将讲述编写 Dockerfile 的一些最佳实践和技巧，让我们的镜像更小、更优。</description>
    </item>
    
    <item>
      <title>构建多架构镜像的最佳实践</title>
      <link>https://xcbeyond.cn/blog/containers/build-multi-platform-images-best-practices/</link>
      <pubDate>Sat, 22 Jan 2022 09:56:55 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/containers/build-multi-platform-images-best-practices/</guid>
      <description>在云时代，容器化已经成为一种事实，把软件产品打包、构建成 Docker 镜像是最基本、最关键的一步。在信创的大背景下，云环境中会存在 x86、arm 等不同的架构，所以在构建镜像时需要构建出多种架构的镜像，以适配不同架构的服务器。
在拉取 Docker 镜像时，会根据当前环境的架构自动拉取对应架构的镜像，如：在 x86 环境下拉取的镜像为 x86 架构的镜像，在 arm 环境下拉取的镜像为 arm 架构的镜像。（前提是，该镜像是多架构的镜像）</description>
    </item>
    
  </channel>
</rss>

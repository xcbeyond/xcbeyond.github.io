<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL性能优化 on xcbeyond</title>
    <link>https://xcbeyond.cn/tags/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in MySQL性能优化 on xcbeyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2021 xcbeyond all rights reserved.</copyright>
    <lastBuildDate>Sun, 29 Mar 2020 01:20:08 +0800</lastBuildDate><atom:link href="https://xcbeyond.cn/tags/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL性能优化(四)：如何高效正确的使用索引</title>
      <link>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%9B%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Sun, 29 Mar 2020 01:20:08 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%9B%9B%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E7%9A%84%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95/</guid>
      <description>正确地创建和使用索引是实现高性能查询的基础。前面文章 MySQL性能优化(三)：深入理解索引的这点事 已经介绍了各种类型的索引及其特点，而在实际使用索引中，如何真正有效地发挥索引的价值，还需要进一步持续不断地学习、磨练。接下来本篇文章将分享如何高效、正确的使用索引。
实践是检验真理的唯一途径，本篇只是站在索引使用的全局来定位的，你只需要通读全篇并结合具体的例子，或回忆以往使用过的地方，对整体有个全面认识，并理解索引是如何工作的，就可以了。在后续使用索引，或者优化索引时，可以从这些方面出发，进一步来加深对索引正确高效的使用。
一、索引失效 索引失效，是一个老生常谈的话题了。只要提到数据库优化、使用索引，都能一口气说出一大堆索引失效的场景，什么不能用、什么不该用这类的话，在此，我就不再一一罗列啰嗦了。
索引失效，是指表中有字段创建了索引，由于 sql 语句书写不当导致索引失效的情况。
在 sql 语句中，将索引列作为表达式的一部分、参与函数/数学等运算，将会导致索引失效。</description>
    </item>
    
    <item>
      <title>MySQL性能优化(三)：深入理解索引的这点事</title>
      <link>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%B4%A2%E5%BC%95%E7%9A%84%E8%BF%99%E7%82%B9%E4%BA%8B/</link>
      <pubDate>Sat, 14 Mar 2020 17:18:43 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%89%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%B4%A2%E5%BC%95%E7%9A%84%E8%BF%99%E7%82%B9%E4%BA%8B/</guid>
      <description>索引，对于良好的数据库性能非常关键。只要提及到数据库性能优化，都会首先想到“索引”，看看表中是否添加索引。尤其是当表中的数据量越来越大时，索引对性能的影响尤为突出。在数据量较小且负载较低时，没有索引或者不恰当索引对性能的影响可能还不明显，但当数据量逐渐增大时，性能则会急剧下降。
不过，索引却经常被忽略，有时候甚至被误解、误用，在实际使用中经常会遇到糟糕索引而导致的性能问题。本文就索引的概念、类型、优点等方面聊聊，一起深入理解索引的这点事，更有助于你清楚的理解索引，能够正确的使用它，便于利用它来进行数据库的优化。
一、什么是索引 索引(Index)，是帮助MySQL高效获取数据的数据结构，是存储引擎用于快速找到记录的一种数据结构。
要理解 MySQL 中索引是如何工作的，最简单的例子就是去看看一本书的目录“索引”部分。如果想在一本书中找到某个章节，一般我们会先看书的目录“索引”，就会立即找到对应的页码。
在 MySQL 中，存储引擎也是用类似的方法使用索引，首先在索引中找到对应的值，然后根据匹配的索引记录找到对应的数据行。</description>
    </item>
    
    <item>
      <title>MySQL性能优化(二)：选择优化的数据类型</title>
      <link>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BA%8C%E9%80%89%E6%8B%A9%E4%BC%98%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 07 Mar 2020 21:22:09 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BA%8C%E9%80%89%E6%8B%A9%E4%BC%98%E5%8C%96%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>良好的设计是高性能的基石，应该根据系统的实际业务需求、使用场景进行设计、优化、再调整，在这其中往往需要权衡各种因素，例如，数据库表究竟如何划分、字段如何选择合适的数据类型等等问题。
MySQL 支持的数据类型非常之多，对于选择恐惧症的小伙伴而言，苦不可言。大部分人在创建数据库表时，基本一股脑的使用 INT、VARCHAR 这两种类型最多，至于长度，则会选择足够大即可，避免日后不够用咋办。只顾当时一时爽，之后坑谁谁难受。
如果你是一个追求极致、高效的开发者，对于上面的情况肯定是不愿让其发生的。在众多的数据类型面前，如何选择正确的数据类型，对于高性能是至关重要的。本文将介绍如何选择优化的数据类型，来提高 MySQL 的性能，将会选取最为常用的类型进行说明，便于在实际开发中创建表、优化表字段类型时提供帮助。
一、选择原则 不管存储哪种类型的数据，下面几个简单的原则将有助于你做出更好的选择。</description>
    </item>
    
    <item>
      <title>MySQL性能优化(一)：MySQL架构与核心问题</title>
      <link>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%80mysql%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 01 Mar 2020 15:13:13 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/mysql-performance-optimization/mysql%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%80mysql%E6%9E%B6%E6%9E%84%E4%B8%8E%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</guid>
      <description>一、前言 作为程序员的你，数据库作为一门必修课，而 MySQL 数据库毫无疑问已经是最常用的数据库了。系统的稳定、高效、高并发等指标，很大程度上取决于数据库性能是否够优，可见性能优化的重要性，这也就不难理解各位在任何一场面试中都会被问及到数据库调优相关的问题。
因此，这就是我为何考虑写该系列文章的主要原因，希望该系列文章(MySQL性能优化)能够给你带来收获，让你更系统、更全面的掌握 MySQL 性能优化的技能、技巧。该系列文章将会持续分享、更新，如果觉得现在或者将来可能对你有用，不妨持续关注、收藏。
在 MySQL 性能优化之前，你有必要重新再认识下 MySQL，便于后续更容易理解 MySQL 性能优化中涉及到的知识点。本文将从 MySQL 架构、核心问题来针对性展开讨论，这也将是 MySQL性能优化 系列文章的开篇之作。</description>
    </item>
    
  </channel>
</rss>

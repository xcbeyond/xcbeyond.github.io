<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on xcbeyond</title>
    <link>https://xcbeyond.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on xcbeyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2021-2025 xcbeyond 版权所有.</copyright>
    <lastBuildDate>Fri, 15 Jan 2021 10:02:25 +0800</lastBuildDate><atom:link href="https://xcbeyond.cn/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我们设计的是微服务还是小单体呢？</title>
      <link>https://xcbeyond.cn/blog/microservice/%E6%88%91%E4%BB%AC%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%98%E6%98%AF%E5%B0%8F%E5%8D%95%E4%BD%93%E5%91%A2/</link>
      <pubDate>Fri, 15 Jan 2021 10:02:25 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/microservice/%E6%88%91%E4%BB%AC%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%BF%98%E6%98%AF%E5%B0%8F%E5%8D%95%E4%BD%93%E5%91%A2/</guid>
      <description>在微服务设计和实践中，可能很多人会一致认为：“将单体应用拆分成多少个微服务，是微服务的设计重点。”
很多人把大量的精力花费在如何拆分微服务上，并把微服务设计好坏全部归因于微服务拆分的好坏。
可事实真是这样吗？其实并非如此！
Martin Fowler在提出微服务时，提到过微服务的一个重要特征：演进式架构。
演进式架构以支持增量、非破坏的变更作为第一原则，同时支持在应用程序结构层面的多维度变化。
那如何判断微服务设计是否合理呢？
其实很简单，你只需看它是否满足这样的情形：**随着业务的发展或需求变更，在领域模型和微服务不断被重新拆分，或者组合成新的微服务过程中，不会大幅度增加软件开发或维护的成本，并且这个架构演进的过程是非常轻松和简单的。**这才是微服务设计的重点，更是微服务设计时最应该关系的问题。
在微服务设计时，很多团队在将集中式单体应用拆分微服务时，单纯按照业务功能将原来的单体应用，从一个部署包拆分成多个所谓的“微服务”部署包。这些“微服务”内的代码却仍然采用传统三层架构的设计模式，即这些代码依旧高度耦合，逻辑边界不清晰，我们暂且称它为“小单体微服务”。
 三层架构：表现层、业务层、数据访问层。</description>
    </item>
    
    <item>
      <title>微服务架构下各类项目的顺势崛起</title>
      <link>https://xcbeyond.cn/blog/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E5%90%84%E7%B1%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%A1%BA%E5%8A%BF%E5%B4%9B%E8%B5%B7/</link>
      <pubDate>Sat, 27 Jul 2019 23:51:20 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/microservice/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8B%E5%90%84%E7%B1%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%A1%BA%E5%8A%BF%E5%B4%9B%E8%B5%B7/</guid>
      <description>一、前言  作者接触微服务也好久时间了，从零开始构建公司产品的微服务化，目前逐步成型稳定。计划在接下来的时间里，把微服务架构下项目的实践，分门别类的总结汇总，围绕“微服务架构下的核心话题”，与大家分享，希望能够给大家在微服务中带来帮助，助力你更好的了解它，避免走不必要的弯路。
 在接触任何一个新鲜事物初期时，你一定有必要了解它，知道它能给你带来什么、有哪些优势、哪些弊端，最终要搞明白它是否合适你，再决定是否使用它。技术更是如此，这也就是常常所说的技术选型、架构选型，更是作为一个架构师必须衡量考虑的。在当前技术不断革新的趋势下，每天可能都有新的概念、新的体系、新的技术(框架)出现，微服务的出现，纷纷被众多技术人、公司所追捧，仿佛给传统项目的重构、新项目的研发带来了便捷、萌发了希望，但大家都真的了解它么？
在微服务架构下，各类项目也顺势崛起，作为技术人，貌似不会微服务，都有些不好意思。(调侃一下而已)
就以下两个方面，带你更好的了解微服务架构体系，明白为什么在微服务架构下各类项目的顺势崛起。
 什么是微服务 为什么要使用微服务  二、什么是微服务 微服务的概念，最早由 Martin Fowler 与 James Lewis 于 2014 年共同提出，在近几年才走入大家的视线，引起关注。首先，我们看一下 Martin Fowlern 在《Microservices》一文是如：</description>
    </item>
    
  </channel>
</rss>

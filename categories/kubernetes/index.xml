<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on xcbeyond</title>
    <link>https://xcbeyond.cn/categories/kubernetes/</link>
    <description>Recent content in Kubernetes on xcbeyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright &amp;copy; 2021 xcbeyond all rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Nov 2020 20:51:34 +0800</lastBuildDate><atom:link href="https://xcbeyond.cn/categories/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes安装篇（下）：基于Kubeadm方式的集群部署</title>
      <link>https://xcbeyond.cn/blog/kubernetes/installation-chapter-part2-deploy-cluster-environment-based-on-kubeadm/</link>
      <pubDate>Sun, 15 Nov 2020 20:51:34 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/kubernetes/installation-chapter-part2-deploy-cluster-environment-based-on-kubeadm/</guid>
      <description>上一篇文章《Kubernetes安装篇（上）：基于Minikube方式部署本地环境》介绍了基于本地环境下的 Kubernetes 安装，目的在于搭建本地开发环境。但在实际生产环境中，Kubernetes 环境就比这复杂的多，起码也是集群起步，因此，本文将从生产环境出发，为你带来基于生产环境下的 Kubernetes 集群部署，让你真正懂得该如何部署真正的 Kubernetes 集群环境。
1、环境准备 采用 VMware 虚拟机安装 Kubernetes 集群，准备环境情况如下：</description>
    </item>
    
    <item>
      <title>Kubernetes安装篇（上）：基于Minikube方式部署本地环境</title>
      <link>https://xcbeyond.cn/blog/kubernetes/installation-chapter-part1-deploy-local-environment-based-on-minikube/</link>
      <pubDate>Sat, 07 Nov 2020 20:23:01 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/kubernetes/installation-chapter-part1-deploy-local-environment-based-on-minikube/</guid>
      <description>一切先从安装开始！
学习一门新的技术，一般先从安装开始，实实在在的安装完，使用它，逐步深入了解。
为了方便大家开发、学习和体验 Kubernetes，Kubernetes 社区提供了可以在本地部署的 minikube，通过 minikube 方式可以在本地运行 Kubernetes。
（Kubernetes 的部署方式还有很多，本文是基于本地开发环境的部署方式，学习它足够了。想要部署一套符合生产环境的集群不是一件容易的事，随后其他篇章将会涉及。）</description>
    </item>
    
    <item>
      <title>Kubernetes概念篇：基本概念和术语</title>
      <link>https://xcbeyond.cn/blog/kubernetes/concept-chapter-kubernetes-baisc-concept/</link>
      <pubDate>Mon, 26 Oct 2020 23:28:43 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/kubernetes/concept-chapter-kubernetes-baisc-concept/</guid>
      <description>在开始使用之前，应当先了解一下关于Kubernetes的相关概念术语，对后续的学习、使用将有很大的帮助。（Kubernetes的概念比较多，建议加强理解，并清楚各种所处位置及关联！）
Kubernetes中的大部分概念，如：Node、Pod、Replication Controller、Service等都可以看作是一种资源对象，几乎所有资源对象都可以通过Kubernetes提供的kubectl工具（或者API接口）执行增、删、改、查等操作并将其保存在etcd中持久化存储。
从这个角度来看，Kubernetes其实是一个高度自动化的资源控制系统，它通过跟踪对比etcd库里保存的“资源期望状态”与当前环境中的“实际资源状态”的差异来实现自动控制和自动纠错的高级功能。
本文将介绍Kubernetes中重要的资源对象，即：Kubernetes的基本概念和术语。
1、Master Master是指Kubernetes集群中的控制节点（Master Node），在每个Kubernetes集群里都需要有一个Master来负责整个集群的管理和控制，基本所有的控制命令都发给它，它负责具体的执行过程，后续执行的所有命令基本都是在Master上运行。
Master提供集群的独特视角，并且拥有一系列组件，比如Kubernetes API Server。API Server提供可以用来和集群交互的REST端点。可以通过命令行或图形化界面来维护pod、副本和服务。</description>
    </item>
    
    <item>
      <title>Kubernetes介绍篇：是什么？为什么要用？</title>
      <link>https://xcbeyond.cn/blog/kubernetes/introduction-chapter-what-is-kubernetes/</link>
      <pubDate>Mon, 26 Oct 2020 10:18:25 +0800</pubDate>
      
      <guid>https://xcbeyond.cn/blog/kubernetes/introduction-chapter-what-is-kubernetes/</guid>
      <description>是时候该学习Kubernetes了，不然都不敢说自己了解容器、了解Docker。
 1、Kubernetes的前世 Kubernetes，它是一个全新的基于容器技术的分布式架构方案，近些年在容器领域使用非常广泛，作为容器化部署实施的典型方案。
看似很新（相对于刚出现时来说），但它却是谷歌十几年以来大规模应用容器技术的经验积累和升华的重要成果。确切地说，Kubernetes是谷歌严格保密十几年的秘密武器——Borg的一个开源版本。Borg是谷歌的一个久负盛名的内部使用的大规模集群管理系统，它基于容器技术，目的是实现资源管理的自动化，以及跨过个数据中心资源利用率的最大化。十几年以来，谷歌一直通过Borg系统管理者数据庞大的应用程序集群，由于谷歌员工都签署了保密协议，即使离职也不能泄露Borg的内部设计，所以外界一直无法了解关于它的更多信息。直到2015年4月，传闻许久的Borg论文发布，伴随着Kubernetes的高调宣传被谷歌首次公开，大家才得以了解它的更多内幕。正式由于站在Borg这个前辈的肩膀上，汲取了Borg过去十年间的经验与教训，所以Kubernetes一经开源就一鸣惊人，并迅速称霸容器领域。
Borg就是一个喷气式飞机的驾驶系统，非常的专业和高大上，他适用于谷歌这样的大公司，它有几百万的机器。Kubernetes是一个它的简化版，它是一辆设计优良的轿车，它适合中小型公司，更方便的用它来调度自己的集群。
2、Kubernetes是什么？ Kubernetes是用于自动部署，扩展和管理容器化应用程序的开源系统，它将组成应用程序的容器组合成逻辑单元，以便于管理和服务发现。Kubernetes源自谷歌15年生产环境的运维经验，同时凝聚了社区的最佳创意和实践。
Kubernetes，构建在Docker技术之上，为跨主机的容器化应用提供资源调度、服务发现、高可用管理和弹性伸缩等一整套功能，它提供了完善的管理工具，涵盖开发、部署测试、运维监控等各个环节。它的目标不仅仅是一个编排系统，更是提供一个规范，可以让你来描述集群的架构，定义服务的最终状态，Kubernetes可以帮你将系统自动达到和维持在这个状态。</description>
    </item>
    
  </channel>
</rss>
